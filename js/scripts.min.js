/*! Hide_and_Reveal 2013-11-07 */
/* Modernizr 2.6.3 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-opacity-csstransitions-shiv-cssclasses-testprop-testallprops-prefixes-domprefixes-load
 */
window.Modernizr = function(a, b, c) {
    function y(a) {
        j.cssText = a;
    }
    function z(a, b) {
        return y(m.join(a + ";") + (b || ""));
    }
    function A(a, b) {
        return typeof a === b;
    }
    function B(a, b) {
        return !!~("" + a).indexOf(b);
    }
    function C(a, b) {
        for (var d in a) {
            var e = a[d];
            if (!B(e, "-") && j[e] !== c) return b == "pfx" ? e : !0;
        }
        return !1;
    }
    function D(a, b, d) {
        for (var e in a) {
            var f = b[a[e]];
            if (f !== c) return d === !1 ? a[e] : A(f, "function") ? f.bind(d || b) : f;
        }
        return !1;
    }
    function E(a, b, c) {
        var d = a.charAt(0).toUpperCase() + a.slice(1), e = (a + " " + o.join(d + " ") + d).split(" ");
        return A(b, "string") || A(b, "undefined") ? C(e, b) : (e = (a + " " + p.join(d + " ") + d).split(" "), 
        D(e, b, c));
    }
    var d = "2.6.3", e = {}, f = !0, g = b.documentElement, h = "modernizr", i = b.createElement(h), j = i.style, k, l = {}.toString, m = " -webkit- -moz- -o- -ms- ".split(" "), n = "Webkit Moz O ms", o = n.split(" "), p = n.toLowerCase().split(" "), q = {}, r = {}, s = {}, t = [], u = t.slice, v, w = {}.hasOwnProperty, x;
    !A(w, "undefined") && !A(w.call, "undefined") ? x = function(a, b) {
        return w.call(a, b);
    } : x = function(a, b) {
        return b in a && A(a.constructor.prototype[b], "undefined");
    }, Function.prototype.bind || (Function.prototype.bind = function(b) {
        var c = this;
        if (typeof c != "function") throw new TypeError();
        var d = u.call(arguments, 1), e = function() {
            if (this instanceof e) {
                var a = function() {};
                a.prototype = c.prototype;
                var f = new a(), g = c.apply(f, d.concat(u.call(arguments)));
                return Object(g) === g ? g : f;
            }
            return c.apply(b, d.concat(u.call(arguments)));
        };
        return e;
    }), q.opacity = function() {
        return z("opacity:.55"), /^0.55$/.test(j.opacity);
    }, q.csstransitions = function() {
        return E("transition");
    };
    for (var F in q) x(q, F) && (v = F.toLowerCase(), e[v] = q[F](), t.push((e[v] ? "" : "no-") + v));
    return e.addTest = function(a, b) {
        if (typeof a == "object") for (var d in a) x(a, d) && e.addTest(d, a[d]); else {
            a = a.toLowerCase();
            if (e[a] !== c) return e;
            b = typeof b == "function" ? b() : b, typeof f != "undefined" && f && (g.className += " " + (b ? "" : "no-") + a), 
            e[a] = b;
        }
        return e;
    }, y(""), i = k = null, function(a, b) {
        function k(a, b) {
            var c = a.createElement("p"), d = a.getElementsByTagName("head")[0] || a.documentElement;
            return c.innerHTML = "x<style>" + b + "</style>", d.insertBefore(c.lastChild, d.firstChild);
        }
        function l() {
            var a = r.elements;
            return typeof a == "string" ? a.split(" ") : a;
        }
        function m(a) {
            var b = i[a[g]];
            return b || (b = {}, h++, a[g] = h, i[h] = b), b;
        }
        function n(a, c, f) {
            c || (c = b);
            if (j) return c.createElement(a);
            f || (f = m(c));
            var g;
            return f.cache[a] ? g = f.cache[a].cloneNode() : e.test(a) ? g = (f.cache[a] = f.createElem(a)).cloneNode() : g = f.createElem(a), 
            g.canHaveChildren && !d.test(a) ? f.frag.appendChild(g) : g;
        }
        function o(a, c) {
            a || (a = b);
            if (j) return a.createDocumentFragment();
            c = c || m(a);
            var d = c.frag.cloneNode(), e = 0, f = l(), g = f.length;
            for (;e < g; e++) d.createElement(f[e]);
            return d;
        }
        function p(a, b) {
            b.cache || (b.cache = {}, b.createElem = a.createElement, b.createFrag = a.createDocumentFragment, 
            b.frag = b.createFrag()), a.createElement = function(c) {
                return r.shivMethods ? n(c, a, b) : b.createElem(c);
            }, a.createDocumentFragment = Function("h,f", "return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&(" + l().join().replace(/\w+/g, function(a) {
                return b.createElem(a), b.frag.createElement(a), 'c("' + a + '")';
            }) + ");return n}")(r, b.frag);
        }
        function q(a) {
            a || (a = b);
            var c = m(a);
            return r.shivCSS && !f && !c.hasCSS && (c.hasCSS = !!k(a, "article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}mark{background:#FF0;color:#000}")), 
            j || p(a, c), a;
        }
        var c = a.html5 || {}, d = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i, e = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i, f, g = "_html5shiv", h = 0, i = {}, j;
        (function() {
            try {
                var a = b.createElement("a");
                a.innerHTML = "<xyz></xyz>", f = "hidden" in a, j = a.childNodes.length == 1 || function() {
                    b.createElement("a");
                    var a = b.createDocumentFragment();
                    return typeof a.cloneNode == "undefined" || typeof a.createDocumentFragment == "undefined" || typeof a.createElement == "undefined";
                }();
            } catch (c) {
                f = !0, j = !0;
            }
        })();
        var r = {
            elements: c.elements || "abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video",
            shivCSS: c.shivCSS !== !1,
            supportsUnknownElements: j,
            shivMethods: c.shivMethods !== !1,
            type: "default",
            shivDocument: q,
            createElement: n,
            createDocumentFragment: o
        };
        a.html5 = r, q(b);
    }(this, b), e._version = d, e._prefixes = m, e._domPrefixes = p, e._cssomPrefixes = o, 
    e.testProp = function(a) {
        return C([ a ]);
    }, e.testAllProps = E, g.className = g.className.replace(/(^|\s)no-js(\s|$)/, "$1$2") + (f ? " js " + t.join(" ") : ""), 
    e;
}(this, this.document), function(a, b, c) {
    function d(a) {
        return "[object Function]" == o.call(a);
    }
    function e(a) {
        return "string" == typeof a;
    }
    function f() {}
    function g(a) {
        return !a || "loaded" == a || "complete" == a || "uninitialized" == a;
    }
    function h() {
        var a = p.shift();
        q = 1, a ? a.t ? m(function() {
            ("c" == a.t ? B.injectCss : B.injectJs)(a.s, 0, a.a, a.x, a.e, 1);
        }, 0) : (a(), h()) : q = 0;
    }
    function i(a, c, d, e, f, i, j) {
        function k(b) {
            if (!o && g(l.readyState) && (u.r = o = 1, !q && h(), l.onload = l.onreadystatechange = null, 
            b)) {
                "img" != a && m(function() {
                    t.removeChild(l);
                }, 50);
                for (var d in y[c]) y[c].hasOwnProperty(d) && y[c][d].onload();
            }
        }
        var j = j || B.errorTimeout, l = b.createElement(a), o = 0, r = 0, u = {
            t: d,
            s: c,
            e: f,
            a: i,
            x: j
        };
        1 === y[c] && (r = 1, y[c] = []), "object" == a ? l.data = c : (l.src = c, l.type = a), 
        l.width = l.height = "0", l.onerror = l.onload = l.onreadystatechange = function() {
            k.call(this, r);
        }, p.splice(e, 0, u), "img" != a && (r || 2 === y[c] ? (t.insertBefore(l, s ? null : n), 
        m(k, j)) : y[c].push(l));
    }
    function j(a, b, c, d, f) {
        return q = 0, b = b || "j", e(a) ? i("c" == b ? v : u, a, b, this.i++, c, d, f) : (p.splice(this.i++, 0, a), 
        1 == p.length && h()), this;
    }
    function k() {
        var a = B;
        return a.loader = {
            load: j,
            i: 0
        }, a;
    }
    var l = b.documentElement, m = a.setTimeout, n = b.getElementsByTagName("script")[0], o = {}.toString, p = [], q = 0, r = "MozAppearance" in l.style, s = r && !!b.createRange().compareNode, t = s ? l : n.parentNode, l = a.opera && "[object Opera]" == o.call(a.opera), l = !!b.attachEvent && !l, u = r ? "object" : l ? "script" : "img", v = l ? "script" : u, w = Array.isArray || function(a) {
        return "[object Array]" == o.call(a);
    }, x = [], y = {}, z = {
        timeout: function(a, b) {
            return b.length && (a.timeout = b[0]), a;
        }
    }, A, B;
    B = function(a) {
        function b(a) {
            var a = a.split("!"), b = x.length, c = a.pop(), d = a.length, c = {
                url: c,
                origUrl: c,
                prefixes: a
            }, e, f, g;
            for (f = 0; f < d; f++) g = a[f].split("="), (e = z[g.shift()]) && (c = e(c, g));
            for (f = 0; f < b; f++) c = x[f](c);
            return c;
        }
        function g(a, e, f, g, h) {
            var i = b(a), j = i.autoCallback;
            i.url.split(".").pop().split("?").shift(), i.bypass || (e && (e = d(e) ? e : e[a] || e[g] || e[a.split("/").pop().split("?")[0]]), 
            i.instead ? i.instead(a, e, f, g, h) : (y[i.url] ? i.noexec = !0 : y[i.url] = 1, 
            f.load(i.url, i.forceCSS || !i.forceJS && "css" == i.url.split(".").pop().split("?").shift() ? "c" : c, i.noexec, i.attrs, i.timeout), 
            (d(e) || d(j)) && f.load(function() {
                k(), e && e(i.origUrl, h, g), j && j(i.origUrl, h, g), y[i.url] = 2;
            })));
        }
        function h(a, b) {
            function c(a, c) {
                if (a) {
                    if (e(a)) c || (j = function() {
                        var a = [].slice.call(arguments);
                        k.apply(this, a), l();
                    }), g(a, j, b, 0, h); else if (Object(a) === a) for (n in m = function() {
                        var b = 0, c;
                        for (c in a) a.hasOwnProperty(c) && b++;
                        return b;
                    }(), a) a.hasOwnProperty(n) && (!c && !--m && (d(j) ? j = function() {
                        var a = [].slice.call(arguments);
                        k.apply(this, a), l();
                    } : j[n] = function(a) {
                        return function() {
                            var b = [].slice.call(arguments);
                            a && a.apply(this, b), l();
                        };
                    }(k[n])), g(a[n], j, b, n, h));
                } else !c && l();
            }
            var h = !!a.test, i = a.load || a.both, j = a.callback || f, k = j, l = a.complete || f, m, n;
            c(h ? a.yep : a.nope, !!i), i && c(i);
        }
        var i, j, l = this.yepnope.loader;
        if (e(a)) g(a, 0, l, 0); else if (w(a)) for (i = 0; i < a.length; i++) j = a[i], 
        e(j) ? g(j, 0, l, 0) : w(j) ? B(j) : Object(j) === j && h(j, l); else Object(a) === a && h(a, l);
    }, B.addPrefix = function(a, b) {
        z[a] = b;
    }, B.addFilter = function(a) {
        x.push(a);
    }, B.errorTimeout = 1e4, null == b.readyState && b.addEventListener && (b.readyState = "loading", 
    b.addEventListener("DOMContentLoaded", A = function() {
        b.removeEventListener("DOMContentLoaded", A, 0), b.readyState = "complete";
    }, 0)), a.yepnope = k(), a.yepnope.executeStack = h, a.yepnope.injectJs = function(a, c, d, e, i, j) {
        var k = b.createElement("script"), l, o, e = e || B.errorTimeout;
        k.src = a;
        for (o in d) k.setAttribute(o, d[o]);
        c = j ? h : c || f, k.onreadystatechange = k.onload = function() {
            !l && g(k.readyState) && (l = 1, c(), k.onload = k.onreadystatechange = null);
        }, m(function() {
            l || (l = 1, c(1));
        }, e), i ? k.onload() : n.parentNode.insertBefore(k, n);
    }, a.yepnope.injectCss = function(a, c, d, e, g, i) {
        var e = b.createElement("link"), j, c = i ? h : c || f;
        e.href = a, e.rel = "stylesheet", e.type = "text/css";
        for (j in d) e.setAttribute(j, d[j]);
        g || (n.parentNode.insertBefore(e, n), m(c, 0));
    };
}(this, document), Modernizr.load = function() {
    yepnope.apply(window, [].slice.call(arguments, 0));
};

/* Copyright (c) 2012 Jeremy McPeak http://www.wdonline.com
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
(function() {
    /**
 * IE version check by James Padolsey
 * https://gist.github.com/527683
 *
 * Yeah, yeah. Browser sniffing is so awful, bad practice, blah blah.
 * We need the version to check filter out all versions except 8.
 */
    var ie = function() {
        var undef, v = 3, div = document.createElement("div"), all = div.getElementsByTagName("i");
        while (div.innerHTML = "<!--[if gt IE " + ++v + "]><i></i><![endif]-->", all[0]) ;
        return v > 4 ? v : undef;
    }();
    // You are no IE8
    if (ie !== 8) {
        // Goodbye
        return;
    } else {
        console.error("DEVIL BROWSER....");
    }
    // create an MS event object and get prototype
    var proto = document.createEventObject().constructor.prototype;
    /**
 * Indicates whether an event propagates up from the target.
 * @returns Boolean
 */
    Object.defineProperty(proto, "bubbles", {
        get: function() {
            // not a complete list of DOM3 events; some of these IE8 doesn't support
            var bubbleEvents = [ "select", "scroll", "click", "dblclick", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "wheel", "textinput", "keydown", "keypress", "keyup" ], type = this.type;
            for (var i = 0, l = bubbleEvents.length; i < l; i++) {
                if (type === bubbleEvents[i]) {
                    return true;
                }
            }
            return false;
        }
    });
    /**
 * Indicates whether or not preventDefault() was called on the event.
 * @returns Boolean
 */
    Object.defineProperty(proto, "defaultPrevented", {
        get: function() {
            // if preventDefault() was never called, or returnValue not given a value
            // then returnValue is undefined
            var returnValue = this.returnValue, undef;
            return !(returnValue === undef || returnValue);
        }
    });
    /**
 * Gets the secondary targets of mouseover and mouseout events (toElement and fromElement)
 * @returns EventTarget or {null}
 */
    Object.defineProperty(proto, "relatedTarget", {
        get: function() {
            var type = this.type;
            if (type === "mouseover" || type === "mouseout") {
                return type === "mouseover" ? this.fromElement : this.toElement;
            }
            return null;
        }
    });
    /**
 * Gets the target of the event (srcElement)
 * @returns EventTarget
 */
    Object.defineProperty(proto, "target", {
        get: function() {
            return this.srcElement;
        }
    });
    /**
 * Cancels the event if it is cancelable. (returnValue)
 * @returns {undefined}
 */
    proto.preventDefault = function() {
        this.returnValue = false;
    };
    /**
 * Prevents further propagation of the current event. (cancelBubble())
 * @returns {undefined}
 */
    proto.stopPropagation = function() {
        this.cancelBubble = true;
    };
    /***************************************
 *
 * Event Listener Setup
 *    Nothing complex here
 *
 ***************************************/
    /**
 * Determines if the provided object implements EventListener
 * @returns boolean
*/
    var implementsEventListener = function(obj) {
        return typeof obj !== "function" && typeof obj["handleEvent"] === "function";
    };
    var customELKey = "__eventShim__";
    /**
 * Adds an event listener to the DOM object
 * @returns {undefined}
 */
    var addEventListenerFunc = function(type, handler, useCapture) {
        // useCapture isn't used; it's IE!
        var fn = handler;
        if (implementsEventListener(handler)) {
            if (typeof handler[customELKey] !== "function") {
                handler[customELKey] = function(e) {
                    handler["handleEvent"](e);
                };
            }
            fn = handler[customELKey];
        }
        this.attachEvent("on" + type, fn);
    };
    /**
 * Removes an event listener to the DOM object
 * @returns {undefined}
 */
    var removeEventListenerFunc = function(type, handler, useCapture) {
        // useCapture isn't used; it's IE!
        var fn = handler;
        if (implementsEventListener(handler)) {
            fn = handler[customELKey];
        }
        this.detachEvent("on" + type, fn);
    };
    // setup the DOM and window objects
    HTMLDocument.prototype.addEventListener = addEventListenerFunc;
    HTMLDocument.prototype.removeEventListener = removeEventListenerFunc;
    Element.prototype.addEventListener = addEventListenerFunc;
    Element.prototype.removeEventListener = removeEventListenerFunc;
    window.addEventListener = addEventListenerFunc;
    window.removeEventListener = removeEventListenerFunc;
})();

/**
 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
 *
 * @version 0.6.11
 * @codingstandard ftlabs-jsv2
 * @copyright The Financial Times Limited [All Rights Reserved]
 * @license MIT License (see LICENSE.txt)
 */
/*jslint browser:true, node:true*/
/*global define, Event, Node*/
/**
 * Instantiate fast-clicking listeners on the specificed layer.
 *
 * @constructor
 * @param {Element} layer The layer to listen on
 */
function FastClick(layer) {
    "use strict";
    var oldOnClick, self = this;
    /**
	 * Whether a click is currently being tracked.
	 *
	 * @type boolean
	 */
    this.trackingClick = false;
    /**
	 * Timestamp for when when click tracking started.
	 *
	 * @type number
	 */
    this.trackingClickStart = 0;
    /**
	 * The element being tracked for a click.
	 *
	 * @type EventTarget
	 */
    this.targetElement = null;
    /**
	 * X-coordinate of touch start event.
	 *
	 * @type number
	 */
    this.touchStartX = 0;
    /**
	 * Y-coordinate of touch start event.
	 *
	 * @type number
	 */
    this.touchStartY = 0;
    /**
	 * ID of the last touch, retrieved from Touch.identifier.
	 *
	 * @type number
	 */
    this.lastTouchIdentifier = 0;
    /**
	 * Touchmove boundary, beyond which a click will be cancelled.
	 *
	 * @type number
	 */
    this.touchBoundary = 10;
    /**
	 * The FastClick layer.
	 *
	 * @type Element
	 */
    this.layer = layer;
    if (!layer || !layer.nodeType) {
        throw new TypeError("Layer must be a document node");
    }
    /** @type function() */
    this.onClick = function() {
        return FastClick.prototype.onClick.apply(self, arguments);
    };
    /** @type function() */
    this.onMouse = function() {
        return FastClick.prototype.onMouse.apply(self, arguments);
    };
    /** @type function() */
    this.onTouchStart = function() {
        return FastClick.prototype.onTouchStart.apply(self, arguments);
    };
    /** @type function() */
    this.onTouchMove = function() {
        return FastClick.prototype.onTouchMove.apply(self, arguments);
    };
    /** @type function() */
    this.onTouchEnd = function() {
        return FastClick.prototype.onTouchEnd.apply(self, arguments);
    };
    /** @type function() */
    this.onTouchCancel = function() {
        return FastClick.prototype.onTouchCancel.apply(self, arguments);
    };
    if (FastClick.notNeeded(layer)) {
        return;
    }
    // Set up event handlers as required
    if (this.deviceIsAndroid) {
        layer.addEventListener("mouseover", this.onMouse, true);
        layer.addEventListener("mousedown", this.onMouse, true);
        layer.addEventListener("mouseup", this.onMouse, true);
    }
    layer.addEventListener("click", this.onClick, true);
    layer.addEventListener("touchstart", this.onTouchStart, false);
    layer.addEventListener("touchmove", this.onTouchMove, false);
    layer.addEventListener("touchend", this.onTouchEnd, false);
    layer.addEventListener("touchcancel", this.onTouchCancel, false);
    // Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
    // which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
    // layer when they are cancelled.
    if (!Event.prototype.stopImmediatePropagation) {
        layer.removeEventListener = function(type, callback, capture) {
            var rmv = Node.prototype.removeEventListener;
            if (type === "click") {
                rmv.call(layer, type, callback.hijacked || callback, capture);
            } else {
                rmv.call(layer, type, callback, capture);
            }
        };
        layer.addEventListener = function(type, callback, capture) {
            var adv = Node.prototype.addEventListener;
            if (type === "click") {
                adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
                    if (!event.propagationStopped) {
                        callback(event);
                    }
                }), capture);
            } else {
                adv.call(layer, type, callback, capture);
            }
        };
    }
    // If a handler is already declared in the element's onclick attribute, it will be fired before
    // FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
    // adding it as listener.
    if (typeof layer.onclick === "function") {
        // Android browser on at least 3.2 requires a new reference to the function in layer.onclick
        // - the old one won't work if passed to addEventListener directly.
        oldOnClick = layer.onclick;
        layer.addEventListener("click", function(event) {
            oldOnClick(event);
        }, false);
        layer.onclick = null;
    }
}

/**
 * Android requires exceptions.
 *
 * @type boolean
 */
FastClick.prototype.deviceIsAndroid = navigator.userAgent.indexOf("Android") > 0;

/**
 * iOS requires exceptions.
 *
 * @type boolean
 */
FastClick.prototype.deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent);

/**
 * iOS 4 requires an exception for select elements.
 *
 * @type boolean
 */
FastClick.prototype.deviceIsIOS4 = FastClick.prototype.deviceIsIOS && /OS 4_\d(_\d)?/.test(navigator.userAgent);

/**
 * iOS 6.0(+?) requires the target element to be manually derived
 *
 * @type boolean
 */
FastClick.prototype.deviceIsIOSWithBadTarget = FastClick.prototype.deviceIsIOS && /OS ([6-9]|\d{2})_\d/.test(navigator.userAgent);

/**
 * Determine whether a given element requires a native click.
 *
 * @param {EventTarget|Element} target Target DOM element
 * @returns {boolean} Returns true if the element needs a native click
 */
FastClick.prototype.needsClick = function(target) {
    "use strict";
    switch (target.nodeName.toLowerCase()) {
      // Don't send a synthetic click to disabled inputs (issue #62)
        case "button":
      case "select":
      case "textarea":
        if (target.disabled) {
            return true;
        }
        break;

      case "input":
        // File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
        if (this.deviceIsIOS && target.type === "file" || target.disabled) {
            return true;
        }
        break;

      case "label":
      case "video":
        return true;
    }
    return /\bneedsclick\b/.test(target.className);
};

/**
 * Determine whether a given element requires a call to focus to simulate click into element.
 *
 * @param {EventTarget|Element} target Target DOM element
 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
 */
FastClick.prototype.needsFocus = function(target) {
    "use strict";
    switch (target.nodeName.toLowerCase()) {
      case "textarea":
        return true;

      case "select":
        return !this.deviceIsAndroid;

      case "input":
        switch (target.type) {
          case "button":
          case "checkbox":
          case "file":
          case "image":
          case "radio":
          case "submit":
            return false;
        }
        // No point in attempting to focus disabled inputs
        return !target.disabled && !target.readOnly;

      default:
        return /\bneedsfocus\b/.test(target.className);
    }
};

/**
 * Send a click event to the specified element.
 *
 * @param {EventTarget|Element} targetElement
 * @param {Event} event
 */
FastClick.prototype.sendClick = function(targetElement, event) {
    "use strict";
    var clickEvent, touch;
    // On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
    if (document.activeElement && document.activeElement !== targetElement) {
        document.activeElement.blur();
    }
    touch = event.changedTouches[0];
    // Synthesise a click event, with an extra attribute so it can be tracked
    clickEvent = document.createEvent("MouseEvents");
    clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
    clickEvent.forwardedTouchEvent = true;
    targetElement.dispatchEvent(clickEvent);
};

FastClick.prototype.determineEventType = function(targetElement) {
    "use strict";
    //Issue #159: Android Chrome Select Box does not open with a synthetic click event
    if (this.deviceIsAndroid && targetElement.tagName.toLowerCase() === "select") {
        return "mousedown";
    }
    return "click";
};

/**
 * @param {EventTarget|Element} targetElement
 */
FastClick.prototype.focus = function(targetElement) {
    "use strict";
    var length;
    // Issue #160: on iOS 7, some input elements (e.g. date datetime) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
    if (this.deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf("date") !== 0 && targetElement.type !== "time") {
        length = targetElement.value.length;
        targetElement.setSelectionRange(length, length);
    } else {
        targetElement.focus();
    }
};

/**
 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
 *
 * @param {EventTarget|Element} targetElement
 */
FastClick.prototype.updateScrollParent = function(targetElement) {
    "use strict";
    var scrollParent, parentElement;
    scrollParent = targetElement.fastClickScrollParent;
    // Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
    // target element was moved to another parent.
    if (!scrollParent || !scrollParent.contains(targetElement)) {
        parentElement = targetElement;
        do {
            if (parentElement.scrollHeight > parentElement.offsetHeight) {
                scrollParent = parentElement;
                targetElement.fastClickScrollParent = parentElement;
                break;
            }
            parentElement = parentElement.parentElement;
        } while (parentElement);
    }
    // Always update the scroll top tracker if possible.
    if (scrollParent) {
        scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
    }
};

/**
 * @param {EventTarget} targetElement
 * @returns {Element|EventTarget}
 */
FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {
    "use strict";
    // On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
    if (eventTarget.nodeType === Node.TEXT_NODE) {
        return eventTarget.parentNode;
    }
    return eventTarget;
};

/**
 * On touch start, record the position and scroll offset.
 *
 * @param {Event} event
 * @returns {boolean}
 */
FastClick.prototype.onTouchStart = function(event) {
    "use strict";
    var targetElement, touch, selection;
    // Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
    if (event.targetTouches.length > 1) {
        return true;
    }
    targetElement = this.getTargetElementFromEventTarget(event.target);
    touch = event.targetTouches[0];
    if (this.deviceIsIOS) {
        // Only trusted events will deselect text on iOS (issue #49)
        selection = window.getSelection();
        if (selection.rangeCount && !selection.isCollapsed) {
            return true;
        }
        if (!this.deviceIsIOS4) {
            // Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
            // when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
            // with the same identifier as the touch event that previously triggered the click that triggered the alert.
            // Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
            // immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
            if (touch.identifier === this.lastTouchIdentifier) {
                event.preventDefault();
                return false;
            }
            this.lastTouchIdentifier = touch.identifier;
            // If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
            // 1) the user does a fling scroll on the scrollable layer
            // 2) the user stops the fling scroll with another tap
            // then the event.target of the last 'touchend' event will be the element that was under the user's finger
            // when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
            // is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
            this.updateScrollParent(targetElement);
        }
    }
    this.trackingClick = true;
    this.trackingClickStart = event.timeStamp;
    this.targetElement = targetElement;
    this.touchStartX = touch.pageX;
    this.touchStartY = touch.pageY;
    // Prevent phantom clicks on fast double-tap (issue #36)
    if (event.timeStamp - this.lastClickTime < 200) {
        event.preventDefault();
    }
    return true;
};

/**
 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
 *
 * @param {Event} event
 * @returns {boolean}
 */
FastClick.prototype.touchHasMoved = function(event) {
    "use strict";
    var touch = event.changedTouches[0], boundary = this.touchBoundary;
    if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
        return true;
    }
    return false;
};

/**
 * Update the last position.
 *
 * @param {Event} event
 * @returns {boolean}
 */
FastClick.prototype.onTouchMove = function(event) {
    "use strict";
    if (!this.trackingClick) {
        return true;
    }
    // If the touch has moved, cancel the click tracking
    if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
        this.trackingClick = false;
        this.targetElement = null;
    }
    return true;
};

/**
 * Attempt to find the labelled control for the given label element.
 *
 * @param {EventTarget|HTMLLabelElement} labelElement
 * @returns {Element|null}
 */
FastClick.prototype.findControl = function(labelElement) {
    "use strict";
    // Fast path for newer browsers supporting the HTML5 control attribute
    if (labelElement.control !== undefined) {
        return labelElement.control;
    }
    // All browsers under test that support touch events also support the HTML5 htmlFor attribute
    if (labelElement.htmlFor) {
        return document.getElementById(labelElement.htmlFor);
    }
    // If no for attribute exists, attempt to retrieve the first labellable descendant element
    // the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
    return labelElement.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea");
};

/**
 * On touch end, determine whether to send a click event at once.
 *
 * @param {Event} event
 * @returns {boolean}
 */
FastClick.prototype.onTouchEnd = function(event) {
    "use strict";
    var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;
    if (!this.trackingClick) {
        return true;
    }
    // Prevent phantom clicks on fast double-tap (issue #36)
    if (event.timeStamp - this.lastClickTime < 200) {
        this.cancelNextClick = true;
        return true;
    }
    // Reset to prevent wrong click cancel on input (issue #156).
    this.cancelNextClick = false;
    this.lastClickTime = event.timeStamp;
    trackingClickStart = this.trackingClickStart;
    this.trackingClick = false;
    this.trackingClickStart = 0;
    // On some iOS devices, the targetElement supplied with the event is invalid if the layer
    // is performing a transition or scroll, and has to be re-detected manually. Note that
    // for this to function correctly, it must be called *after* the event target is checked!
    // See issue #57; also filed as rdar://13048589 .
    if (this.deviceIsIOSWithBadTarget) {
        touch = event.changedTouches[0];
        // In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
        targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
        targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
    }
    targetTagName = targetElement.tagName.toLowerCase();
    if (targetTagName === "label") {
        forElement = this.findControl(targetElement);
        if (forElement) {
            this.focus(targetElement);
            if (this.deviceIsAndroid) {
                return false;
            }
            targetElement = forElement;
        }
    } else if (this.needsFocus(targetElement)) {
        // Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
        // Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
        if (event.timeStamp - trackingClickStart > 100 || this.deviceIsIOS && window.top !== window && targetTagName === "input") {
            this.targetElement = null;
            return false;
        }
        this.focus(targetElement);
        // Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
        if (!this.deviceIsIOS4 || targetTagName !== "select") {
            this.targetElement = null;
            event.preventDefault();
        }
        return false;
    }
    if (this.deviceIsIOS && !this.deviceIsIOS4) {
        // Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
        // and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
        scrollParent = targetElement.fastClickScrollParent;
        if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
            return true;
        }
    }
    // Prevent the actual click from going though - unless the target node is marked as requiring
    // real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
    if (!this.needsClick(targetElement)) {
        event.preventDefault();
        this.sendClick(targetElement, event);
    }
    return false;
};

/**
 * On touch cancel, stop tracking the click.
 *
 * @returns {void}
 */
FastClick.prototype.onTouchCancel = function() {
    "use strict";
    this.trackingClick = false;
    this.targetElement = null;
};

/**
 * Determine mouse events which should be permitted.
 *
 * @param {Event} event
 * @returns {boolean}
 */
FastClick.prototype.onMouse = function(event) {
    "use strict";
    // If a target element was never set (because a touch event was never fired) allow the event
    if (!this.targetElement) {
        return true;
    }
    if (event.forwardedTouchEvent) {
        return true;
    }
    // Programmatically generated events targeting a specific element should be permitted
    if (!event.cancelable) {
        return true;
    }
    // Derive and check the target element to see whether the mouse event needs to be permitted;
    // unless explicitly enabled, prevent non-touch click events from triggering actions,
    // to prevent ghost/doubleclicks.
    if (!this.needsClick(this.targetElement) || this.cancelNextClick) {
        // Prevent any user-added listeners declared on FastClick element from being fired.
        if (event.stopImmediatePropagation) {
            event.stopImmediatePropagation();
        } else {
            // Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
            event.propagationStopped = true;
        }
        // Cancel the event
        event.stopPropagation();
        event.preventDefault();
        return false;
    }
    // If the mouse event is permitted, return true for the action to go through.
    return true;
};

/**
 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
 * an actual click which should be permitted.
 *
 * @param {Event} event
 * @returns {boolean}
 */
FastClick.prototype.onClick = function(event) {
    "use strict";
    var permitted;
    // It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
    if (this.trackingClick) {
        this.targetElement = null;
        this.trackingClick = false;
        return true;
    }
    // Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
    if (event.target.type === "submit" && event.detail === 0) {
        return true;
    }
    permitted = this.onMouse(event);
    // Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
    if (!permitted) {
        this.targetElement = null;
    }
    // If clicks are permitted, return true for the action to go through.
    return permitted;
};

/**
 * Remove all FastClick's event listeners.
 *
 * @returns {void}
 */
FastClick.prototype.destroy = function() {
    "use strict";
    var layer = this.layer;
    if (this.deviceIsAndroid) {
        layer.removeEventListener("mouseover", this.onMouse, true);
        layer.removeEventListener("mousedown", this.onMouse, true);
        layer.removeEventListener("mouseup", this.onMouse, true);
    }
    layer.removeEventListener("click", this.onClick, true);
    layer.removeEventListener("touchstart", this.onTouchStart, false);
    layer.removeEventListener("touchmove", this.onTouchMove, false);
    layer.removeEventListener("touchend", this.onTouchEnd, false);
    layer.removeEventListener("touchcancel", this.onTouchCancel, false);
};

/**
 * Check whether FastClick is needed.
 *
 * @param {Element} layer The layer to listen on
 */
FastClick.notNeeded = function(layer) {
    "use strict";
    var metaViewport;
    // Devices that don't support touch don't need FastClick
    if (typeof window.ontouchstart === "undefined") {
        return true;
    }
    if (/Chrome\/[0-9]+/.test(navigator.userAgent)) {
        // Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
        if (FastClick.prototype.deviceIsAndroid) {
            metaViewport = document.querySelector("meta[name=viewport]");
            if (metaViewport && metaViewport.content.indexOf("user-scalable=no") !== -1) {
                return true;
            }
        } else {
            return true;
        }
    }
    // IE10 with -ms-touch-action: none, which disables double-tap-to-zoom (issue #97)
    if (layer.style.msTouchAction === "none") {
        return true;
    }
    return false;
};

/**
 * Factory method for creating a FastClick object
 *
 * @param {Element} layer The layer to listen on
 */
FastClick.attach = function(layer) {
    "use strict";
    return new FastClick(layer);
};

if (typeof define !== "undefined" && define.amd) {
    // AMD. Register as an anonymous module.
    define(function() {
        "use strict";
        return FastClick;
    });
} else if (typeof module !== "undefined" && module.exports) {
    module.exports = FastClick.attach;
    module.exports.FastClick = FastClick;
} else {
    window.FastClick = FastClick;
}

/**
 * A responsive slider tool in which an image is a draggable / resizable
 * width element which reveals a photo underneath
 *
 * @author Matthew Shelley: mshelley@bynd.com
 */
var RevealSlider = function(params) {
    // Need to apply these vs. dumping on
    this.config = params;
    // Kick it off
    this.init();
};

RevealSlider.prototype = {
    deviceConfig: {
        isIE: false,
        isMobile: false,
        isSafari: false
    },
    /**
	 * Never go fully to either end of opacity
	 */
    transparencyRange: {
        min: .15,
        max: .85
    },
    /**
	 * Standard intializer
	 */
    init: function() {
        var me = this, before = document.getElementById(me.config["before-container"]), after = document.getElementById(me.config["after-container"]);
        // Get device / browser details
        me.userConfiguration();
        // Hold onto our slider
        me.slider = {
            element: document.getElementById(me.config.target),
            handle: document.getElementById(me.config["slider-element"])
        };
        // Hold onto our before element. This is the one we manipulate
        me.before = {
            element: before,
            image: before.getElementsByTagName("img")[0]
        };
        // Hold onto our before element. This is the one we manipulate
        me.after = {
            element: after,
            image: after.getElementsByTagName("img")[0]
        };
        // Add our events
        me.addEventListeners();
        // Get our ratio
        me._setupRatio();
        // Setup the stage once
        me._setStage();
        // Force a click on safari browsers
        me.simulateClick(me.slider.handle);
    },
    /**
	 * We need to know some general information about the users device. These properties control our touch vs. mouse event logic
	 */
    userConfiguration: function() {
        var me = this;
        // Check for mobile / touch events
        if ("ontouchstart" in document.documentElement) {
            me.deviceConfig.mobile = true;
        }
        // Check for safari as we need to initiate a click
        if (navigator.userAgent.toLowerCase().indexOf("safari") !== -1) {
            me.deviceConfig.isSafari = true;
        }
        // Check for IE
        if (navigator.appName.indexOf("Internet Explorer") !== -1) {
            var ieOld = navigator.appVersion.indexOf("MSIE 9") !== -1 ? 9 : 8, ieVersion = navigator.appVersion.indexOf("MSIE 1") !== -1 ? 10 : ieOld;
            me.deviceConfig.isIE = true;
            me.deviceConfig.ieVersion = ieVersion;
        }
    },
    /**
	 * We have to trigger the first click to ensure all content is fully in place, this was seen on Safari
	 */
    simulateClick: function(element) {
        var me = this, clickTarget = parseInt(me.slider.element.offsetLeft) + parseInt(me.slider.element.offsetWidth / 2);
        if (!me.deviceConfig.isSafari) {
            return;
        }
        if (document.dispatchEvent) {
            // W3C
            var oEvent = document.createEvent("MouseEvents");
            oEvent.initMouseEvent("click", true, true, window, 1, clickTarget, 1, clickTarget, 1, false, false, false, false, 0, element);
            element.dispatchEvent(oEvent);
        } else if (document.fireEvent) {
            // IE
            element.fireEvent("onclick");
        }
    },
    /**
	 * Add our event listeners ~ We need to listen to resize
	 */
    addEventListeners: function() {
        var me = this;
        // 1. Document resize, this adds the responsiveness
        window.addEventListener("resize", function(e) {
            me._setStage(e);
        }, false);
        // 2a. Touch events || or drag events
        if (me.deviceConfig.mobile) {
            me.slider.handle.addEventListener("touchstart", function(e) {
                e.preventDefault();
                me.dragEnabled = true;
                me._dragEvent(e);
            }, false);
            me.slider.handle.addEventListener("touchend", function(e) {
                me.dragEnabled = false;
            }, false);
            document.body.addEventListener("touchmove", function(e) {
                if (me.dragEnabled) {
                    me._dragEvent(e);
                }
            }, false);
        } else {
            me.slider.handle.addEventListener("mousedown", function(e) {
                e.preventDefault();
                me.dragEnabled = true;
                me._dragEvent(e);
            }, false);
            // We attach the body if they scroll outside our element and then release
            document.body.addEventListener("mouseup", function(e) {
                me.dragEnabled = false;
            }, false);
            // We attach the body if they scroll off our browser window
            window.addEventListener("mouseout", function(e) {
                me.dragEnabled = false;
            }, false);
            document.body.addEventListener("mousemove", function(e) {
                e.preventDefault();
                if (me.dragEnabled) {
                    me._dragEvent(e);
                }
            }, false);
        }
        // 3. Slider Element clicked
        me.slider.element.addEventListener("click", function(e) {
            me._dragEvent(e, true);
        }, false);
    },
    /**
	 * (original height / original width x new width) = new height
	 */
    _setupRatio: function() {
        var me = this, currentWidth = me.slider.element.offsetWidth, tmp = me.config.ratio.split("/"), ratio = {
            width: tmp[0],
            height: tmp[1]
        }, newHeight = currentWidth * ratio.height / ratio.width;
        me.ratio = ratio;
        me._setStage();
        // Position the slider element once
        me.slider.handle.style.left = me.config.start || "50%";
        me.before.element.style.width = me.config.start || "50%";
    },
    /**
	 * We manipulate the image opacity or a colored overlay, this methods takes into account a max / min range
	 *
	 * @param {Interger} percentage ~ The 0 - 100% opacity level
	 */
    _setOpacity: function(percentage) {
        var me = this, opacity = parseInt(percentage) / 100;
        if (opacity <= me.transparencyRange.min) {
            opacity = me.transparencyRange.min;
        } else if (opacity >= me.transparencyRange.max) {
            opacity = me.transparencyRange.max;
        }
        document.getElementById("after-overlay").style.opacity = opacity;
        document.getElementById("before-overlay").style.opacity = Math.abs(opacity - 1);
    },
    /**
	 * Update our stage dimensions: This method basically makes this responsive
	 *
	 * @param {Event} e ~ Window Resize event
	 */
    _setStage: function(e) {
        var me = this, beforeWidth = me.before.image.offsetWidth, currentWidth = me.slider.element.offsetWidth, currentHeight = me.slider.element.offsetHeight, newHeight = Math.floor(currentWidth * me.ratio.height / me.ratio.width);
        // Try to minimize this call
        if (currentHeight !== newHeight) {
            me.slider.element.style.height = newHeight + "px";
            // We must set these values here to get the appear effect
            me.before.image.height = Math.floor(newHeight);
            me.after.image.height = Math.floor(newHeight);
        }
    },
    /**
	 * As we drag we need to hide or reveal the image
	 * We work with percentages to make the reveal stay in position as well images fade in / out as well
	 *
	 * @param {Event} e ~ event object passed in
	 * @param {Boolean} animate ~ Animate should only be passed in when fired by the click event
	 */
    _dragEvent: function(e, animate) {
        var me = this, browserX = e.x ? e.x : e.clientX, mobileX = e.touches && e.touches[0].clientX !== 0 ? e.touches[0].clientX : e.pageX, currentX = me.deviceConfig.mobile ? mobileX : browserX, offsetLeft = me.slider.element.offsetLeft, newWidth = currentX - offsetLeft, maxWidth = offsetLeft + me.slider.element.offsetWidth, singlePercent = me.slider.element.offsetWidth / 100, percentWidth = Math.floor(newWidth / singlePercent), end = percentWidth, ieOffset = offsetLeft / singlePercent;
        // We only use the CSS transistion when we click to animate
        if (animate) {
            me.slider.element.setAttribute("class", "css-animate");
        } else {
            me.slider.element.setAttribute("class", "");
        }
        // Right when you let go it will fire 0.. thats bad...
        if (currentX !== 0) {
            me._setOpacity(percentWidth);
            // Lovely IE tweaks
            if (me.deviceConfig.isIE) {
                currentX += offsetLeft;
            }
            // We are dragging within the bounds so we need to update
            if (currentX >= offsetLeft && currentX <= maxWidth) {
                end = me.deviceConfig.isIE ? percentWidth + ieOffset : percentWidth;
            } else {
                // Far left side, show the full before
                if (currentX <= offsetLeft) {
                    end = 0;
                } else {
                    end = 99.9;
                }
            }
            // If we don't pass animate the user is dragging
            if (!animate) {
                me.before.element.style.width = end + "%";
                me.slider.handle.style.left = end + "%";
            } else {
                // Use CSS transistions if available
                if (typeof Modernizr !== "undefined" && Modernizr.csstransitions) {
                    me.before.element.style.width = end + "%";
                    me.slider.handle.style.left = end + "%";
                    me._setOpacity(end);
                } else {
                    if (me.deviceConfig.isIE && me.deviceConfig.ieVersion !== 8) {
                        me.animationTimer(Math.floor(end));
                    } else {
                        me.before.element.style.width = end + "%";
                        me.slider.handle.style.left = end + "%";
                    }
                }
            }
        }
    },
    /**
	 * This browser doesn't support CSS transistions so we use a timer
	 *
	 * @param {Interger} value ~ Our ending amount
	 */
    animationTimer: function(value) {
        var me = this, percent = Math.floor(parseInt(me.slider.handle.style.left)), currentPosition = percent, forward = percent < value ? true : false, delay = 5, i = currentPosition;
        // Clear the timer in case the user click multiple times
        clearInterval(me.timer);
        // Now we animate it..
        me.timer = setInterval(function() {
            if (i === value) {
                clearInterval(me.timer);
            }
            me._setOpacity(i);
            me.before.element.style.width = i + "%";
            me.slider.handle.style.left = i + "%";
            var direction = forward ? i += 1 : i -= 1;
        }, delay);
    }
};